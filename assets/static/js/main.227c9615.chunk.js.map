{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["client","WebSocket","App","useState","board","setBoard","message","setMessage","addMessage","msg","handleSend","send","JSON","stringify","onopen","onmessage","data","element","document","getElementById","scrollTop","scrollHeight","updateScroll","onclose","className","id","style","type","value","onChange","e","target","onKeyDown","key","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sMAGMA,EAAS,IAAIC,UAAU,wBAwDdC,MAtDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAIb,SAASC,EAAWC,GAClBJ,EAASD,EAAQK,GAuBnB,SAASC,IACPV,EAAOW,KAAKC,KAAKC,UAAUP,IAC3BC,EAAW,IAGb,OAzBAP,EAAOc,OAAS,WACdN,EAAW,gBAGbR,EAAOe,UAAY,SAACN,GAClBD,EAAWC,EAAIO,KAAO,MAQxB,WACE,IAAMC,EAAUC,SAASC,eAAe,WACpCF,IACFA,EAAQG,UAAYH,EAAQI,cAV9BC,IAGFtB,EAAOuB,QAAU,WACff,EAAW,sBAgBX,sBAAKgB,UAAU,MAAf,UACE,qBAAKC,GAAG,UAAUC,MAAO,CACvB,OAAU,kBACV,MAAS,QACT,OAAU,QACV,SAAY,UAJd,SAKG,+BAAOtB,MACV,uBAAOuB,KAAK,OACLC,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAOvB,EAAWuB,EAAEC,OAAOH,QACtCI,UAAW,SAACF,GACI,UAAVA,EAAEG,KACJvB,OAGV,wBAAQwB,QAAS,kBAAMxB,KAAvB,sBCxCSyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAASC,eAAe,SAM1BgB,K","file":"static/js/main.227c9615.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nconst client = new WebSocket('ws://chat.gben.me/ws');\n\nfunction App() {\n  const [board, setBoard] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  function addMessage(msg: string) {\n    setBoard(board + msg);\n  }\n\n  client.onopen = () => {\n    addMessage(\"Connected\\n\");\n  };\n\n  client.onmessage = (msg) => {\n    addMessage(msg.data + \"\\n\");\n    updateScroll();\n  };\n\n  client.onclose = () => {\n    addMessage(\"Connection closed\");\n  };\n\n  function updateScroll() {\n    const element = document.getElementById(\"chatbox\");\n    if (element) {\n      element.scrollTop = element.scrollHeight;\n    }\n  }\n\n  function handleSend() {\n    client.send(JSON.stringify(message));\n    setMessage(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <pre id=\"chatbox\" style={{\n        \"border\": \"1px solid black\",\n        \"width\": \"600px\",\n        \"height\": \"600px\",\n        \"overflow\": \"scroll\",\n      }}><code>{board}</code></pre>\n      <input type=\"text\"\n             value={message}\n             onChange={(e) => setMessage(e.target.value)}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') {\n                handleSend()\n              }\n            }}/>\n      <button onClick={() => handleSend()}>Send</button>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}