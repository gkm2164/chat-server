{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["client","WebSocket","App","useState","board","setBoard","message","setMessage","addMessage","msg","concat","style","handleSubmit","e","preventDefault","send","JSON","stringify","onopen","onmessage","parse","data","element","document","getElementById","scrollTop","scrollHeight","updateScroll","onclose","Box","id","onSubmit","Grid","container","item","xs","TextField","type","value","helperText","onChange","target","fullWidth","Button","disabled","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8PAKMA,EAAS,IAAIC,UAAU,wBA0EdC,MAxEf,WAAgB,IAAD,EACaC,mBAAwB,IADrC,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAIb,SAASC,EAAWC,GAClBJ,EAASD,EAAMM,OAAO,CAAC,sBAAMC,MAAO,CAAC,QAAW,SAAzB,SAAoCF,OA4B7D,SAASG,EAAaC,GACpBA,EAAEC,iBALFd,EAAOe,KAAKC,KAAKC,UAAUX,IAC3BC,EAAW,IAQb,OA9BAP,EAAOkB,OAAS,WACdV,EAAW,mDAGbR,EAAOmB,UAAY,SAACV,GAClBD,EAAWQ,KAAKI,MAAMX,EAAIY,OAQ5B,WACE,IAAMC,EAAUC,SAASC,eAAe,WACpCF,IACFA,EAAQG,UAAYH,EAAQI,cAV9BC,IAGF3B,EAAO4B,QAAU,WACfpB,EAAW,2DAqBX,eAACqB,EAAA,EAAD,CAAKlB,MAAO,CACV,OAAU,QACV,OAAU,QAFZ,UAIE,qBAAKmB,GAAG,UAAUnB,MAAO,CACvB,OAAU,kBACV,OAAU,MACV,SAAY,UAHd,SAIG,+BAAOP,MACV,sBAAM2B,SAAU,SAAClB,GAAD,OAAOD,EAAaC,IAApC,SACE,eAACmB,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAWC,KAAK,OACLC,MAAOhC,EACPiC,WAAW,oBACXC,SAAU,SAAC3B,GAAD,OACRN,EAAWM,EAAE4B,OAAOH,QACtBI,WAAS,MAGtB,cAACV,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAACQ,EAAA,EAAD,CAAQN,KAAK,SACLO,SAAsB,KAAZtC,EACVuC,QAAQ,YACRC,MAAM,UACNJ,WAAS,EAJjB,6BCrDGK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASC,eAAe,SAM1BuB,M","file":"static/js/main.caf08fea.chunk.js","sourcesContent":["import {Button, Grid} from '@material-ui/core';\nimport {Box, TextField} from '@material-ui/core';\nimport React, {useState} from 'react';\nimport './App.css';\n\nconst client = new WebSocket('ws://chat.gben.me/ws');\n\nfunction App() {\n  const [board, setBoard] = useState<JSX.Element[]>([]);\n  const [message, setMessage] = useState(\"\");\n\n  function addMessage(msg: JSX.Element) {\n    setBoard(board.concat([<span style={{\"display\": \"block\"}}>{msg}</span>]));\n  }\n\n  client.onopen = () => {\n    addMessage(<>Connected</>);\n  };\n\n  client.onmessage = (msg) => {\n    addMessage(JSON.parse(msg.data));\n    updateScroll();\n  };\n\n  client.onclose = () => {\n    addMessage(<>Connection closed</>);\n  };\n\n  function updateScroll() {\n    const element = document.getElementById(\"chatbox\");\n    if (element) {\n      element.scrollTop = element.scrollHeight;\n    }\n  }\n\n  function handleSend() {\n    client.send(JSON.stringify(message));\n    setMessage(\"\");\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    handleSend();\n  }\n\n  return (\n    <Box style={{\n      \"height\": \"100vh\",\n      \"margin\": \"10px\",\n    }}>\n      <pre id=\"chatbox\" style={{\n        \"border\": \"1px solid black\",\n        \"height\": \"80%\",\n        \"overflow\": \"scroll\",\n      }}><code>{board}</code></pre>\n      <form onSubmit={(e) => handleSubmit(e)}>\n        <Grid container>\n          <Grid item xs={11}>\n            <TextField type=\"text\"\n                       value={message}\n                       helperText=\"Type message here\"\n                       onChange={(e) =>\n                         setMessage(e.target.value)}\n                       fullWidth\n            />\n          </Grid>\n          <Grid item xs={1}>\n            <Button type=\"submit\"\n                    disabled={message === \"\"}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth>Send</Button>\n          </Grid>\n        </Grid>\n      </form>\n    </Box>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}